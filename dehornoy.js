// Generated by CoffeeScript 1.10.0
var execSync, exp, fs, fullTwist, getDehornoy, getDehornoy2, getFloor, inv, isLt, isSigmaPos, negFullTwist;

fs = require('fs');

execSync = require('child_process').execSync;

inv = function(braid) {
  var gen;
  return ((function() {
    var j, len, ref, results;
    ref = braid.split(' ');
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      gen = ref[j];
      results.push(-1 * gen);
    }
    return results;
  })()).reverse().join(' ');
};

exp = function(braid, n) {
  if (n === 0) {
    return '';
  } else if (n > 0) {
    return ((function() {
      var j, ref, results;
      results = [];
      for (j = 1, ref = n; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
        results.push(braid);
      }
      return results;
    })()).join(' ');
  } else {
    return exp(inv(braid), -n);
  }
};

fullTwist = function(n) {
  return ((function() {
    var j, k, ref, ref1, results, results1;
    results = [];
    for (j = 1, ref = n; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
      results.push((function() {
        results1 = [];
        for (var k = 1, ref1 = n - 1; 1 <= ref1 ? k <= ref1 : k >= ref1; 1 <= ref1 ? k++ : k--){ results1.push(k); }
        return results1;
      }).apply(this).join(' '));
    }
    return results;
  })()).join(' ');
};

negFullTwist = function(n) {
  return ((function() {
    var j, k, ref, ref1, results, results1;
    results = [];
    for (j = 1, ref = n; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
      results.push((function() {
        results1 = [];
        for (var k = ref1 = 1 - n; ref1 <= -1 ? k <= -1 : k >= -1; ref1 <= -1 ? k++ : k--){ results1.push(k); }
        return results1;
      }).apply(this).join(' '));
    }
    return results;
  })()).join(' ');
};

isSigmaPos = function(dehornoy) {
  var gen, isPos, j, len, minGen, ref;
  minGen = 999;
  isPos = true;
  ref = dehornoy.split(' ');
  for (j = 0, len = ref.length; j < len; j++) {
    gen = ref[j];
    if (Math.abs(gen) < minGen) {
      minGen = Math.abs(gen);
      isPos = gen > 0;
    }
  }
  return isPos;
};

getDehornoy = function(braid) {
  fs.writeFileSync('wordin', braid + " 0");
  execSync('./a.out');
  return (fs.readFileSync('wordout', 'utf8')).replace(/\s*$/, '');
};

isLt = function(b1, b2) {
  return isSigmaPos(getDehornoy((inv(b1)) + " " + b2));
};

getFloor = function(braid, n) {
  var floor;
  floor = 0;
  while (isLt(exp(fullTwist(n), floor + 1), braid)) {
    floor += 1;
  }
  return floor;
};

module.exports = {
  exp: exp,
  getDehornoy: getDehornoy,
  getFloor: getFloor
};

getDehornoy2 = function(word) {
  var dumbRed, findGen, findHandle, getMinGen, handleTransform;
  getMinGen = function() {
    var gen, j, len, minGen;
    minGen = Math.abs(word[0]);
    for (j = 0, len = word.length; j < len; j++) {
      gen = word[j];
      if (Math.abs(gen) < minGen) {
        minGen = Math.abs(gen);
      }
    }
    return minGen;
  };
  dumbRed = function() {
    var j, l, r, ref, results, w;
    l = -1;
    w = 0;
    results = [];
    for (r = j = 0, ref = word.length; 0 <= ref ? j < ref : j > ref; r = 0 <= ref ? ++j : --j) {
      if (w === -1 * word[r]) {
        word[l] = word[r] = 0;
        l -= 1;
        results.push(w = l < 0 ? 0 : word[l]);
      } else {
        l += 1;
        if (l !== r) {
          word[l] = word[r];
          word[r] = 0;
        }
        results.push(w = word[l]);
      }
    }
    return results;
  };
  findGen = function(gen, start, end) {
    var i, j, ref, ref1;
    for (i = j = ref = start, ref1 = end; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
      if (Math.abs(word[i]) === gen) {
        return i;
      }
    }
    return -1;
  };
  findHandle = function(gen, start, end) {
    var h1, h2, handle;
    handle = {};
    h1 = findGen(gen, start, end);
    if (h1 === (-1) || h1 === (end - 1)) {
      handle.gen = 0;
      return handle;
    }
    h2 = findGen(gen, h1 + 1, end);
    while (h2 !== -1) {
      if (word[h1] === word[h2]) {
        h1 = h2;
      } else {
        handle = {
          gen: gen,
          p1: h1,
          p2: h2
        };
        return handle;
      }
    }
    handle.gen = 0;
    return handle;
  };
  return handleTransform = function(handle) {
    return 1 + 1;
  };
};
